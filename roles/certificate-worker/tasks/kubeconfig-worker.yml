---
- name: create kubeconfig directory
  file:
    path: "{{ item.path }}"
    state: directory
  with_items:
    - { path: '{{ kubernetes.certificate.directory }}/kubeconfig/'}

- name: generate kubeconfig for kubeproxy
  args:
    chdir: "{{ kubernetes.certificate.directory }}/kubeconfig/"
  shell: |
    kubectl config set-cluster {{ kubernetes.clusterName }} \
        --certificate-authority={{ kubernetes.certificate.directory }}/intermediates/kubernetes-ca/kubernetes-ca.pem \
        --embed-certs=true \
        --server=https://{{ infrastructure.keepalived.virtualIP }}:{{ infrastructure.keepalived.virtualIPPort }} \
        --kubeconfig=kube-proxy.kubeconfig
    
    kubectl config set-credentials system:kube-proxy \
        --client-certificate={{ kubernetes.certificate.directory }}/certificates/kube-proxy/kube-proxy.pem \
        --client-key={{ kubernetes.certificate.directory }}/certificates/kube-proxy/kube-proxy-key.pem \
        --embed-certs=true \
        --kubeconfig=kube-proxy.kubeconfig
    
    kubectl config set-context default \
        --cluster={{ kubernetes.clusterName }} \
        --user=system:kube-proxy \
        --kubeconfig=kube-proxy.kubeconfig
    
    kubectl config use-context default --kubeconfig=kube-proxy.kubeconfig

- name: generate kubeconfig for kubelet master
  vars:
    master_ip: "{{ groups['master'] | join(' ') }}"
  args:
    chdir: "{{ kubernetes.certificate.directory }}/kubeconfig/"
  shell: |
    for instance in {{ master_ip }}; do
      kubectl config set-cluster {{ kubernetes.clusterName }} \
        --certificate-authority={{ kubernetes.certificate.directory }}/intermediates/kubernetes-ca/kubernetes-ca.pem \
        --embed-certs=true \
        --server=https://{{ infrastructure.keepalived.virtualIP }}:{{ infrastructure.keepalived.virtualIPPort }}\
        --kubeconfig=${instance}.kubeconfig

      kubectl config set-credentials system:node:${instance} \
        --client-certificate={{ kubernetes.certificate.directory }}/certificates/kubelet/${instance}.pem \
        --client-key={{ kubernetes.certificate.directory }}/certificates/kubelet/${instance}-key.pem \
        --embed-certs=true \
        --kubeconfig=${instance}.kubeconfig

      kubectl config set-context default \
        --cluster={{ kubernetes.clusterName }} \
        --user=system:node:${instance} \
        --kubeconfig=${instance}.kubeconfig

      kubectl config use-context default --kubeconfig=${instance}.kubeconfig
    done

- name: generate kubeconfig for kubelet worker
  vars:
    worker_ip: "{{ groups['worker'] | join(' ') }}"
  args:
    chdir: "{{ kubernetes.certificate.directory }}/kubeconfig/"
  shell: |
    for instance in {{ worker_ip }}; do
      kubectl config set-cluster {{ kubernetes.clusterName }} \
        --certificate-authority={{ kubernetes.certificate.directory }}/intermediates/kubernetes-ca/kubernetes-ca.pem \
        --embed-certs=true \
        --server=https://{{ infrastructure.keepalived.virtualIP }}:{{ infrastructure.keepalived.virtualIPPort }}\
        --kubeconfig=${instance}.kubeconfig

      kubectl config set-credentials system:node:${instance} \
        --client-certificate={{ kubernetes.certificate.directory }}/certificates/kubelet/${instance}.pem \
        --client-key={{ kubernetes.certificate.directory }}/certificates/kubelet/${instance}-key.pem \
        --embed-certs=true \
        --kubeconfig=${instance}.kubeconfig

      kubectl config set-context default \
        --cluster={{ kubernetes.clusterName }} \
        --user=system:node:${instance} \
        --kubeconfig=${instance}.kubeconfig

      kubectl config use-context default --kubeconfig=${instance}.kubeconfig
    done

- name: copy kubeconfig into worker node
  vars:
    worker_ip: "{{ groups['worker'] | join(' ') }}"
  args:
    chdir: "{{ kubernetes.certificate.directory }}"
  shell: |
    for instance in {{ worker_ip }}; do
         sshpass -f ~/p scp {{ kubernetes.certificate.directory }}/kubeconfig/${instance}.kubeconfig {{ user }}@${instance}:~/
         sshpass -f ~/p scp {{ kubernetes.certificate.directory }}/kubeconfig/kube-proxy.kubeconfig {{ user }}@${instance}:~/
    done

- name: copy kubeconfig into master node
  vars:
    master_ip: "{{ groups['master'] | join(' ') }}"
  args:
    chdir: "{{ kubernetes.certificate.directory }}"
  shell: |
    for instance in {{ master_ip }}; do
         sshpass -f ~/p scp {{ kubernetes.certificate.directory }}/kubeconfig/${instance}.kubeconfig {{ user }}@${instance}:~/
         sshpass -f ~/p scp {{ kubernetes.certificate.directory }}/kubeconfig/kube-proxy.kubeconfig {{ user }}@${instance}:~/
    done
