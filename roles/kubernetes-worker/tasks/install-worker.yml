- name: install package
  apt:
    name: "{{ item }}"
    update_cache: yes
  with_items:
  - 'apt-transport-https'
  - 'ca-certificates'
  - 'curl'
  - 'software-properties-common'
  - 'socat'
  - 'conntrack'
  - 'ipset'

# - name: Disable SWAP in fstab
#   replace:
#     path: /etc/fstab
#     regexp: '^([^#].*?\sswap\s+sw\s+.*)$'
#     replace: '# \1'
#     backup: yes

- name: Disable swap
  command: swapoff -a

- name: create required directory
  file:
    path: "{{ item }}"
    state: directory
  with_items:
  - '/etc/cni/net.d'
  - '/opt/cni/bin'
  - '/opt/containerd'
  - '/var/lib/kubelet'
  - '/var/lib/kube-proxy'
  - '/var/lib/kubernetes'
  - '/var/run/kubernetes'
  - '/etc/kubernetes/manifests'
  - '/etc/containerd/'


# wget https://dl.k8s.io/v1.22.10/kubernetes-server-linux-amd64.tar.gz
# tar -xvzf kubernetes-server-linux-amd64.tar.gz -C /opt/
# - name: Download and extract Kubernetes server {{ kubernetes.version }}
#   unarchive:
#     src: https://dl.k8s.io/{{ kubernetes.version }}/kubernetes-server-linux-amd64.tar.gz
#     dest: /opt/
#     remote_src: yes

# - name: install kubectl, kube-proxy, and kubelet
#   copy:
#     src: "{{ item.src }}"
#     dest: "{{ item.dest }}"
#     mode: a+x
#     remote_src: yes
#   with_items:
#   - { src: '/opt/kubernetes/server/bin/kubelet', dest: '/usr/local/bin/kubelet' }
#   - { src: '/opt/kubernetes/server/bin/kube-proxy', dest: '/usr/local/bin/kube-proxy' }
#   - { src: '/opt/kubernetes/server/bin/kubectl', dest: '/usr/local/bin/kubectl' }

# - name: Download and extract containerd
#   unarchive:
#     src: https://github.com/containerd/containerd/releases/download/v{{ kubernetes.components.containerd.version }}/containerd-{{ kubernetes.components.containerd.version }}-linux-amd64.tar.gz
#     dest: /opt/containerd
#     remote_src: yes

# - name: install containerd
#   copy:
#     src: "{{ item.src }}"
#     dest: "{{ item.dest }}"
#     mode: a+x
#     remote_src: yes
#   with_items:
#   - { src: '/opt/containerd/bin/containerd', dest: '/usr/local/bin/containerd' }
#   - { src: '/opt/containerd/bin/containerd-shim', dest: '/usr/local/bin/containerd-shim' }
#   - { src: '/opt/containerd/bin/containerd-shim-runc-v1', dest: '/usr/local/bin/containerd-shim-runc-v1' }
#   - { src: '/opt/containerd/bin/containerd-shim-runc-v2', dest: '/usr/local/bin/containerd-shim-runc-v2' }
#   - { src: '/opt/containerd/bin/ctr', dest: '/usr/local/bin/ctr' }

# - name: Downlaod and crictl-{{ kubernetes.components.cri.version }}-linux-amd64.tar.gz
#   unarchive:
#     src: https://github.com/kubernetes-sigs/cri-tools/releases/download/{{ kubernetes.components.cri.version }}/crictl-{{ kubernetes.components.cri.version }}-linux-amd64.tar.gz
#     dest: /usr/local/bin/
#     remote_src: yes



#############################################
# wget https://github.com/opencontainers/runc/releases/download/v1.1.3/runc.amd64
# wget https://storage.googleapis.com/gvisor/releases/release/20220510/x86_64/runsc
# wget https://storage.googleapis.com/gvisor/releases/release/20220510/x86_64/containerd-shim-runsc-v1
# wget https://github.com/containernetworking/plugins/releases/download/v1.1.1/cni-plugins-linux-amd64-v1.1.1.tgz

# mv runc.amd64 runc
# chmod +x runc runsc containerd-shim-runsc-v1
# sudo mv runc runsc containerd-shim-runsc-v1 /usr/local/bin/
# sudo tar -xvf cni-plugins-linux-amd64-v1.1.1.tgz -C /opt/cni/bin/


# - name: Downlaod runc
#   get_url:
#     url: https://github.com/opencontainers/runc/releases/download/{{ kubernetes.components.runc.version }}/runc.amd64
#     force: yes
#     dest: /usr/local/bin/runc
#     remote_src: yes
#     mode: a+x

# - name: Downlaod gvisor runsc
#   get_url:
#     url: https://storage.googleapis.com/gvisor/releases/release/{{ kubernetes.components.gvisor.version }}/x86_64/runsc
#     force: yes
#     dest: /usr/local/bin/runsc
#     remote_src: yes
#     mode: a+x
#   when: kubernetes.components.gvisor.enabled

# - name: Downlaod gvisor containerd-shim-runsc-v1
#   get_url:
#     url: https://storage.googleapis.com/gvisor/releases/release/{{ kubernetes.components.gvisor.version }}/x86_64/containerd-shim-runsc-v1
#     force: yes
#     dest: /usr/local/bin/containerd-shim-runsc-v1
#     remote_src: yes
#     mode: a+x
#   when: kubernetes.components.gvisor.enabled

# - name: Downlaod and Extract cni-plugins-amd64-{{ kubernetes.components.cni.version }}.tgz
#   unarchive:
#     src: https://github.com/containernetworking/plugins/releases/download/{{ kubernetes.components.cni.version }}/cni-plugins-linux-amd64-{{ kubernetes.components.cni.version }}.tgz
#     dest: /opt/cni/bin/
#     remote_src: yes


    
- name: Copy cert
  copy: 
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    remote_src: yes
  with_items:
    - { src: '/home/{{ user }}/kubernetes-ca.pem', dest: '/var/lib/kubernetes/kubernetes-ca.pem' }
    - { src: '/home/{{ user }}/{{ inventory_hostname }}-key.pem', dest: '/var/lib/kubelet/{{ inventory_hostname }}-key.pem' }
    - { src: '/home/{{ user }}/{{ inventory_hostname }}.pem', dest: '/var/lib/kubelet/{{ inventory_hostname }}.pem' }
    - { src: '/home/{{ user }}/{{ inventory_hostname }}.kubeconfig', dest: '/var/lib/kubelet/kubeconfig' }
    - { src: '/home/{{ user }}/kube-proxy.kubeconfig', dest: '/var/lib/kube-proxy/kubeconfig' }

- name: copy containerd config
  template:
    src: "containerd.conf.j2"
    dest: "/etc/modules-load.d/containerd.conf"
    mode: 644

- name: Add the overlay module
  modprobe:
    name: overlay
    state: present

- name: Add the br_netfilter module
  modprobe:
    name: br_netfilter
    state: present

- name: copy 99-kubernetes-cri.conf config
  template:
    src: "99-kubernetes-cri.conf.j2"
    dest: "/etc/sysctl.d/99-kubernetes-cri.conf"
    mode: 644

- name: reload sysctl
  shell: sysctl --system

- name: copy containerd config
  template:
    src: "config.toml.j2"
    dest: "/etc/containerd/config.toml"
    mode: 644

- name: copy containerd service
  template:
    src: "containerd.service.j2"
    dest: "/etc/systemd/system/containerd.service"
    mode: 644

- name: restart containerd
  systemd:
    name: containerd
    state: restarted
    daemon_reload: yes
    enabled: yes

- name: copy custom resolv.conf
  template:
    src: "resolv.conf.j2"
    dest: "/var/lib/kubernetes/resolv.conf"
    mode: 644

- name: copy kubelet config
  template:
    src: "kubelet-config.yml.j2"
    dest: "/var/lib/kubelet/kubelet-config.yml"
    mode: 644

- name: copy kubelet service
  template:
    src: "kubelet.service.j2"
    dest: "/etc/systemd/system/kubelet.service"
    mode: 644

- name: copy kube-proxy config
  template:
    src: "kube-proxy-config.yml.j2"
    dest: "/var/lib/kube-proxy/kube-proxy-config.yml"
    mode: 644

- name: copy kube-proxy service
  template:
    src: "kube-proxy.service.j2"
    dest: "/etc/systemd/system/kube-proxy.service"
    mode: 644

- name: restart kubelet
  systemd:
    name: kubelet
    state: restarted
    daemon_reload: yes
    enabled: yes

- name: restart kube-proxy
  systemd:
    name: kube-proxy
    state: restarted
    daemon_reload: yes
    enabled: yes
