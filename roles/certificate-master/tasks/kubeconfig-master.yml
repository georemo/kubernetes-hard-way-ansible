---
- name: create kubeconfig directory
  file:
    path: "{{ item.path }}"
    state: directory
  with_items:
    - { path: '{{ kubernetes.certificate.directory }}/kubeconfig/'}

- name: generate kubeconfig for admin
  args:
    chdir: "{{ kubernetes.certificate.directory }}/kubeconfig/"
  shell: |
    kubectl config set-cluster {{ kubernetes.clusterName }} \
        --certificate-authority={{ kubernetes.certificate.directory }}/intermediates/kubernetes-ca/kubernetes-ca.pem \
        --embed-certs=true \
        --server=https://127.0.0.1:6443 \
        --kubeconfig=admin.kubeconfig

    kubectl config set-credentials admin \
        --client-certificate={{ kubernetes.certificate.directory }}/certificates/kubernetes-admin/kubernetes-admin.pem \
        --client-key={{ kubernetes.certificate.directory }}/certificates/kubernetes-admin/kubernetes-admin-key.pem \
        --embed-certs=true \
        --kubeconfig=admin.kubeconfig

    kubectl config set-context default \
        --cluster={{ kubernetes.clusterName }} \
        --user=admin \
        --kubeconfig=admin.kubeconfig

    kubectl config use-context default --kubeconfig=admin.kubeconfig

- name: generate kubeconfig for kube-controller-manager
  args:
    chdir: "{{ kubernetes.certificate.directory }}/kubeconfig/"
  shell: |
    kubectl config set-cluster {{ kubernetes.clusterName }} \
        --certificate-authority={{ kubernetes.certificate.directory }}/intermediates/kubernetes-ca/kubernetes-ca.pem \
        --embed-certs=true \
        --server=https://127.0.0.1:6443 \
        --kubeconfig=kube-controller-manager.kubeconfig

    kubectl config set-credentials system:kube-controller-manager \
        --client-certificate={{ kubernetes.certificate.directory }}/certificates/kube-controller-manager/kube-controller-manager.pem \
        --client-key={{ kubernetes.certificate.directory }}/certificates/kube-controller-manager/kube-controller-manager-key.pem \
        --embed-certs=true \
        --kubeconfig=kube-controller-manager.kubeconfig

    kubectl config set-context default \
        --cluster={{ kubernetes.clusterName }} \
        --user=system:kube-controller-manager \
        --kubeconfig=kube-controller-manager.kubeconfig

    kubectl config use-context default --kubeconfig=kube-controller-manager.kubeconfig

- name: generate kubeconfig for kube-scheduler
  args:
    chdir: "{{ kubernetes.certificate.directory }}/kubeconfig/"
  shell: |
    kubectl config set-cluster {{ kubernetes.clusterName }} \
        --certificate-authority={{ kubernetes.certificate.directory }}/intermediates/kubernetes-ca/kubernetes-ca.pem \
        --embed-certs=true \
        --server=https://127.0.0.1:6443 \
        --kubeconfig=kube-scheduler.kubeconfig

    kubectl config set-credentials system:kube-scheduler \
        --client-certificate={{ kubernetes.certificate.directory }}/certificates/kube-scheduler/kube-scheduler.pem \
        --client-key={{ kubernetes.certificate.directory }}/certificates/kube-scheduler/kube-scheduler-key.pem \
        --embed-certs=true \
        --kubeconfig=kube-scheduler.kubeconfig

    kubectl config set-context {{ kubernetes.clusterName }} \
        --cluster={{ kubernetes.clusterName }} \
        --user=system:kube-scheduler \
        --kubeconfig=kube-scheduler.kubeconfig

    kubectl config use-context {{ kubernetes.clusterName }} --kubeconfig=kube-scheduler.kubeconfig

- name: copy kubeconfig into master node
  vars:
    master_ip: "{{ groups['master'] | join(' ') }}"
  args:
    chdir: "{{ kubernetes.certificate.directory }}"
  shell: |
    for instance in {{ master_ip }}; do
         sshpass -f ~/p scp {{ kubernetes.certificate.directory }}/kubeconfig/admin.kubeconfig {{ user }}@${instance}:~/
         sshpass -f ~/p scp {{ kubernetes.certificate.directory }}/kubeconfig/kube-controller-manager.kubeconfig {{ user }}@${instance}:~/
         sshpass -f ~/p scp {{ kubernetes.certificate.directory }}/kubeconfig/kube-scheduler.kubeconfig {{ user }}@${instance}:~/
    done
