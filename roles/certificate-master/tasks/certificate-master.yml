---
- name: create master certificate directory
  file:
    path: "{{ item.path }}"
    state: directory
  with_items:
    - { path: '{{ kubernetes.certificate.directory }}/certificates/kube-apiserver'}
    - { path: '{{ kubernetes.certificate.directory }}/certificates/kube-apiserver-kubelet-client'}
    - { path: '{{ kubernetes.certificate.directory }}/certificates/kubernetes-admin'}
    - { path: '{{ kubernetes.certificate.directory }}/certificates/kube-controller-manager'}
    - { path: '{{ kubernetes.certificate.directory }}/certificates/kube-scheduler'}
    - { path: '{{ kubernetes.certificate.directory }}/certificates/front-proxy-client'}

- name: copy ca-config & master csr template
  template:
    src: "{{item.src}}"
    dest: "{{item.dest}}"
  with_items:
    - { src: 'ca-config.json.j2', dest: '{{ kubernetes.certificate.directory }}/templates/ca-config.json' }
    - { src: 'kube-apiserver-csr.json.j2', dest: '{{ kubernetes.certificate.directory }}/templates/kube-apiserver-csr.json' }
    - { src: 'kube-apiserver-kubelet-client-csr.json.j2', dest: '{{ kubernetes.certificate.directory }}/templates/kube-apiserver-kubelet-client-csr.json' }
    - { src: 'kubernetes-admin-csr.json.j2', dest: '{{ kubernetes.certificate.directory }}/templates/kubernetes-admin-csr.json' }
    - { src: 'kube-controller-manager-csr.json.j2', dest: '{{ kubernetes.certificate.directory }}/templates/kube-controller-manager-csr.json' }
    - { src: 'kube-scheduler-csr.json.j2', dest: '{{ kubernetes.certificate.directory }}/templates/kube-scheduler-csr.json' }
    - { src: 'front-proxy-client-csr.json.j2', dest: '{{ kubernetes.certificate.directory }}/templates/front-proxy-client-csr.json' }

- name: generate kube-apiserver certificate
  args:
    chdir: "{{ kubernetes.certificate.directory }}/certificates/kube-apiserver"
  shell: |
    cfssl gencert \
    -ca={{ kubernetes.certificate.directory }}/intermediates/kubernetes-ca/kubernetes-ca.pem \
    -ca-key={{ kubernetes.certificate.directory }}/intermediates/kubernetes-ca/kubernetes-ca-key.pem \
    -config={{ kubernetes.certificate.directory }}/templates/ca-config.json \
    -profile=server \
    -hostname=localhost,127.0.0.1,10.32.0.1,{{ item }},{{ infrastructure.keepalived.virtualIP }}{% if kubernetes.components.APIServer.additionalIP is defined %},{{ kubernetes.components.APIServer.additionalIP }}{% endif %},kubernetes,kubernetes.default,kubernetes.default.svc,kubernetes.default.svc.cluster,kubernetes.svc.cluster.local \
    {{ kubernetes.certificate.directory }}/templates/kube-apiserver-csr.json | cfssljson -bare {{ item }}-kube-apiserver
  with_items: "{{ groups['master'] }}"

- name: generate kube-apiserver-kubelet-client certificate
  args:
    chdir: "{{ kubernetes.certificate.directory }}/certificates/kube-apiserver-kubelet-client"
  shell: |
    cfssl gencert \
    -ca={{ kubernetes.certificate.directory }}/intermediates/kubernetes-ca/kubernetes-ca.pem \
    -ca-key={{ kubernetes.certificate.directory }}/intermediates/kubernetes-ca/kubernetes-ca-key.pem \
    -config={{ kubernetes.certificate.directory }}/templates/ca-config.json \
    -profile=client \
    {{ kubernetes.certificate.directory }}/templates/kube-apiserver-kubelet-client-csr.json | cfssljson -bare kube-apiserver-kubelet-client

- name: generate kubernetes-admin certificate
  args:
    chdir: "{{ kubernetes.certificate.directory }}/certificates/kubernetes-admin"
  shell: |
    cfssl gencert \
    -ca={{ kubernetes.certificate.directory }}/intermediates/kubernetes-ca/kubernetes-ca.pem \
    -ca-key={{ kubernetes.certificate.directory }}/intermediates/kubernetes-ca/kubernetes-ca-key.pem \
    -config={{ kubernetes.certificate.directory }}/templates/ca-config.json \
    -profile=client \
    {{ kubernetes.certificate.directory }}/templates/kubernetes-admin-csr.json | cfssljson -bare kubernetes-admin

- name: generate kube-controller-manager certificate
  args:
    chdir: "{{ kubernetes.certificate.directory }}/certificates/kube-controller-manager"
  shell: |
    cfssl gencert \
    -ca={{ kubernetes.certificate.directory }}/intermediates/kubernetes-ca/kubernetes-ca.pem \
    -ca-key={{ kubernetes.certificate.directory }}/intermediates/kubernetes-ca/kubernetes-ca-key.pem \
    -config={{ kubernetes.certificate.directory }}/templates/ca-config.json \
    -profile=client \
    {{ kubernetes.certificate.directory }}/templates/kube-controller-manager-csr.json | cfssljson -bare kube-controller-manager

- name: generate kube-scheduler certificate
  args:
    chdir: "{{ kubernetes.certificate.directory }}/certificates/kube-scheduler"
  shell: |
    cfssl gencert \
    -ca={{ kubernetes.certificate.directory }}/intermediates/kubernetes-ca/kubernetes-ca.pem \
    -ca-key={{ kubernetes.certificate.directory }}/intermediates/kubernetes-ca/kubernetes-ca-key.pem \
    -config={{ kubernetes.certificate.directory }}/templates/ca-config.json \
    -profile=client \
    {{ kubernetes.certificate.directory }}/templates/kube-scheduler-csr.json | cfssljson -bare kube-scheduler

- name: generate front-proxy-client certificate
  args:
    chdir: "{{ kubernetes.certificate.directory }}/certificates/front-proxy-client"
  shell: |
    cfssl gencert \
    -ca={{ kubernetes.certificate.directory }}/intermediates/kubernetes-front-proxy-ca/kubernetes-front-proxy-ca.pem \
    -ca-key={{ kubernetes.certificate.directory }}/intermediates/kubernetes-front-proxy-ca/kubernetes-front-proxy-ca-key.pem \
    -config={{ kubernetes.certificate.directory }}/templates/ca-config.json \
    -profile=client \
    {{ kubernetes.certificate.directory }}/templates/front-proxy-client-csr.json | cfssljson -bare front-proxy-client

- name: copy cert into master node
  vars:
    master_ip: "{{ groups['master'] | join(' ') }}"
  args:
    chdir: "{{ kubernetes.certificate.directory }}"
  shell: |
    for instance in {{ master_ip }}; do
       sshpass -f ~/p scp {{ kubernetes.certificate.directory }}/certificates/kube-apiserver/${instance}-kube-apiserver.pem {{ user }}@${instance}:~/kube-apiserver.pem
       sshpass -f ~/p scp {{ kubernetes.certificate.directory }}/certificates/kube-apiserver/${instance}-kube-apiserver-key.pem {{ user }}@${instance}:~/kube-apiserver-key.pem
       sshpass -f ~/p scp {{ kubernetes.certificate.directory }}/certificates/kube-apiserver-kubelet-client/kube-apiserver-kubelet-client.pem {{ user }}@${instance}:~/kube-apiserver-kubelet-client.pem
       sshpass -f ~/p scp {{ kubernetes.certificate.directory }}/certificates/kube-apiserver-kubelet-client/kube-apiserver-kubelet-client-key.pem {{ user }}@${instance}:~/kube-apiserver-kubelet-client-key.pem
       sshpass -f ~/p scp {{ kubernetes.certificate.directory }}/certificates/front-proxy-client/front-proxy-client.pem {{ user }}@${instance}:~/front-proxy-client.pem
       sshpass -f ~/p scp {{ kubernetes.certificate.directory }}/certificates/front-proxy-client/front-proxy-client-key.pem {{ user }}@${instance}:~/front-proxy-client-key.pem
    done
